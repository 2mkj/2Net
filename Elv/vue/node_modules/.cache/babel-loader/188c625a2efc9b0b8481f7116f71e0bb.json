{"ast":null,"code":"import child from './childView.vue';\nimport { ref } from 'vue';\nexport default {\n  components: {\n    child\n  },\n  emits: ['message'],\n\n  setup(props, context) {\n    const message = ref('초기값');\n    const showMessage = ref('');\n\n    const getMessage = value => {\n      console.log(value);\n      showMessage.value = value;\n    };\n\n    const change = event => {\n      context.emit('message', event.target.value);\n    };\n\n    return {\n      message,\n      getMessage,\n      showMessage,\n      change\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAwBA,OAAOA,KAAP,MAAkB,iBAAlB;AACA,SAAQC,GAAR,QAAkB,KAAlB;AACA,eAAe;EACXC,UAAU,EAAC;IACPF;EADO,CADA;EAIXG,KAAK,EAAC,CAAC,SAAD,CAJK;;EAKXC,KAAK,CAACC,KAAD,EAAQC,OAAR,EAAgB;IACnB,MAAMC,OAAO,GAACN,GAAG,CAAC,KAAD,CAAjB;IACA,MAAMO,WAAW,GAACP,GAAG,CAAC,EAAD,CAArB;;IAEA,MAAMQ,UAAS,GAAKC,KAAD,IAAS;MAC1BC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAF,WAAW,CAACE,KAAZ,GAAkBA,KAAlB;IACF,CAHA;;IAKA,MAAOG,MAAK,GAAKC,KAAD,IAAS;MACvBR,OAAO,CAACS,IAAR,CAAa,SAAb,EAAwBD,KAAK,CAACE,MAAN,CAAaN,KAArC;IACF,CAFA;;IAIA,OAAM;MACJH,OADI;MACKE,UADL;MACiBD,WADjB;MAC8BK;IAD9B,CAAN;EAGF;;AArBW,CAAf","names":["child","ref","components","emits","setup","props","context","message","showMessage","getMessage","value","console","log","change","event","emit","target"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex16_component\\_4_emit\\parentView.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n    <!-- 1,  :val = \"message\"\r\n                  동적 속성을 전달하기 위한 콜론(:)을 사용합니다\r\n                  여기서 사용된 message는 자바스크립트의 속성입니다\r\n                  데이터 바이딩합니다\r\n            \r\n            2, @parent_message=\"getMessage\r\n                  parent_message : 사용자 정의 이벤트 이름\r\n                  getMessage : 이벤트를 실행할 함수\r\n                  자식 컴포넌트에서 부모 컴포넌트로 데이터 전달할때 이  방식을 사용합니다\r\n                  자식은 context.emit('parent_message', send_message.value); 처럼\r\n                  context.emit()메서드를 호출하면 됩니다\r\n                  첫번째 인자는 부모에서 정의한 이벤트 이름,\r\n                  두번째 인자는 부모에게 보낼 값 입니다\r\n    -->\r\n    <child val=\"message\" @parent_message=\"getMessage\"/>\r\n    <input @input=\"change\">\r\n    <div>여기는 부모 : 자식에게 받은 값을 출력하는 곳 <br>\r\n    <span>{{showMessage}}</span></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport child from './childView.vue'\r\nimport {ref} from 'vue'\r\nexport default {\r\n    components:{\r\n        child\r\n    },\r\n    emits:['message'],\r\n    setup(props, context){\r\n      const message=ref('초기값');\r\n      const showMessage=ref('');\r\n\r\n      const getMessage = (value)=>{\r\n        console.log(value);\r\n        showMessage.value=value;\r\n      }\r\n\r\n      const  change = (event)=>{\r\n        context.emit('message', event.target.value);\r\n      }\r\n\r\n      return{\r\n        message, getMessage, showMessage, change\r\n      }\r\n    }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.parent{\r\n    background: cornsilk;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}