{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-4fa8384f\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"child\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" 부모에게 넘기리 값 : \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createTextVNode(\"부모 컴포넌트에서 받은 값 : \" + _toDisplayString($props.val), 1\n  /* TEXT */\n  ), _hoisted_2, _hoisted_3, _createElementVNode(\"input\", {\n    onInput: _cache[0] || (_cache[0] = (...args) => $setup.change && $setup.change(...args))\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  )]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;gEAAgCC,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;iDAAI;;;uBAA/CC,oBAEM,KAFN,cAEM,kBAFa,sBAAiBC,iBAAEC,UAAF,GAAK;EAAA;GAEnC,EAFqCC,UAErC,cADOJ,oBAAuB,OAAvB,EAAuB;IAAfK,OAAK,yCAAEC,uCAAF;EAAU,CAAvB;;EAAA,CACP,CAFN","names":["class","_createElementVNode","_createElementBlock","_toDisplayString","$props","_hoisted_2","onInput","$setup"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex17_store\\_1\\childView.vue"],"sourcesContent":["<template>\r\n  <div class=\"child\">부모 컴포넌트에서 받은 값 : {{val}}<br>\r\n  부모에게 넘기리 값 : <input @input=\"change\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n  props:{\r\n        val:{\r\n            type:String,\r\n            required:true\r\n        }\r\n    },\r\n    emits:['parent_message'],\r\n    setup(props, context){\r\n      //setup()의 첫번째 매개변수 props를 이용하면 명시한 속성값을 알 수 있습니다.\r\n      console.log(`props.val = ${props.val}`);\r\n\r\n      const  change = (event)=>{\r\n        /* \r\n            자식 컴포넌트에서 부모 컴포넌트로 데이터를 전달할때 이 방식을 사용합니다\r\n            자식은 context.emit('parent_message', send_message.value); 처럼\r\n            context.emit()메서드를 호출하면 됩니다\r\n            첫번째 인자는 부모에서 정의한 이벤트 이름,\r\n            두번째 인자는 부모에게 보낼 값 입니다.\r\n        */\r\n       context.emit('parent_message', event.target.value);\r\n      }\r\n      return{\r\n        change\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n.child{background: azure;}\r\n</style>"]},"metadata":{},"sourceType":"module"}