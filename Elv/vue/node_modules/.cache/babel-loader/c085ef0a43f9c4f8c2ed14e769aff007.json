{"ast":null,"code":"/*     https://v3.ko.vuejs.org/guide/component-props.html#prop-타입\r\n          https://v3.ko.vuejs.org/guide/component-props.html#prop-유효성-검사\r\n      1. 컴포넌트랑\r\n    조합하여 화면을 구성할 수 있는 블록을 의미합니다.\r\n    컴포넌트를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며,\r\n    코드를 쉽게 이해하고 재사용할 수 있습니다.\r\n      2. 컴포넌트 사용법\r\n    (1) <script>에서 컴포넌의 위치와 이름을 import문으로 작성합니다.\r\n    (2) export default { 의 components 속성에 사용할 컴포넌트 이름을 작성합니다. \r\n    (3) <template>에서 컴포넌트를 배치합니다.\r\n*/\nimport child from './childView.vue';\nimport { ref } from 'vue';\nexport default {\n  components: {\n    child\n  },\n\n  setup() {\n    const message = ref('초기값');\n    const showMessage = ref('');\n\n    const getMessage = value => {\n      console.log(value);\n      showMessage.value = value;\n    };\n\n    return {\n      message,\n      getMessage,\n      showMessage\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAyBI;;;;;;;;;;;AAaJ,OAAOA,KAAP,MAAkB,iBAAlB;AACA,SAAQC,GAAR,QAAkB,KAAlB;AACA,eAAe;EACXC,UAAU,EAAC;IACPF;EADO,CADA;;EAIXG,KAAK,GAAE;IACL,MAAMC,OAAO,GAACH,GAAG,CAAC,KAAD,CAAjB;IACA,MAAMI,WAAW,GAACJ,GAAG,CAAC,EAAD,CAArB;;IAEA,MAAMK,UAAS,GAAKC,KAAD,IAAS;MAC1BC,OAAO,CAACC,GAAR,CAAYF,KAAZ;MACAF,WAAW,CAACE,KAAZ,GAAkBA,KAAlB;IACF,CAHA;;IAKA,OAAM;MACJH,OADI;MACKE,UADL;MACiBD;IADjB,CAAN;EAGF;;AAhBW,CAAf","names":["child","ref","components","setup","message","showMessage","getMessage","value","console","log"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex16_component\\_4_emit\\parentView.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n    <!-- 1,  :val = \"message\"\r\n                  동적 속성을 전달하기 위한 콜론(:)을 사용합니다\r\n                  여기서 사용된 message는 자바스크립트의 속성입니다\r\n                  데이터 바이딩합니다\r\n            \r\n            2, @parent_message=\"getMessage\r\n                  parent_message : 사용자 정의 이벤트 이름\r\n                  getMessage : 이벤트를 실행할 함수\r\n                  자식 컴포넌트에서 부모 컴포넌트로 데이터 전달할때 이  방식을 사용합니다\r\n                  자식은 context.emit('parent_message', send_message.value); 처럼\r\n                  context.emit()메서드를 호출하면 됩니다\r\n                  첫번째 인자는 부모에서 정의한 이벤트 이름,\r\n                  두번째 인자는 부모에게 보낼 값 입니다\r\n    -->\r\n    <child val=\"message\" @parent_message=\"getMessage\"/>\r\n\r\n    <div>여기는 부모 : 자식에게 받은 값을 출력하는 곳 <br>\r\n    <span>{{showMessage}}</span></div>\r\n\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    /*     https://v3.ko.vuejs.org/guide/component-props.html#prop-타입\r\n              https://v3.ko.vuejs.org/guide/component-props.html#prop-유효성-검사\r\n\r\n        1. 컴포넌트랑\r\n        조합하여 화면을 구성할 수 있는 블록을 의미합니다.\r\n        컴포넌트를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며,\r\n        코드를 쉽게 이해하고 재사용할 수 있습니다.\r\n\r\n        2. 컴포넌트 사용법\r\n        (1) <script>에서 컴포넌의 위치와 이름을 import문으로 작성합니다.\r\n        (2) export default { 의 components 속성에 사용할 컴포넌트 이름을 작성합니다. \r\n        (3) <template>에서 컴포넌트를 배치합니다.\r\n    */\r\nimport child from './childView.vue'\r\nimport {ref} from 'vue'\r\nexport default {\r\n    components:{\r\n        child\r\n    },\r\n    setup(){\r\n      const message=ref('초기값');\r\n      const showMessage=ref('');\r\n\r\n      const getMessage = (value)=>{\r\n        console.log(value);\r\n        showMessage.value=value;\r\n      }\r\n\r\n      return{\r\n        message, getMessage, showMessage\r\n      }\r\n    }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.parent{\r\n    background: cornsilk;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}