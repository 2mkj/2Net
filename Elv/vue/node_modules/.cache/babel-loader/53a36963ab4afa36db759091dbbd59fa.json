{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-d285d19e\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"parent\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\"여기는 부모 : 자식에게 받은 값을 출력하는 곳 \");\n\nconst _hoisted_3 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n));\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_child = _resolveComponent(\"child\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" 1,  :val = \\\"message\\\"\\r\\n                  동적 속성을 전달하기 위한 콜론(:)을 사용합니다\\r\\n                  여기서 사용된 message는 자바스크립트의 속성입니다\\r\\n                  데이터 바이딩합니다\\r\\n            \\r\\n            2, @parent_message=\\\"getMessage\\r\\n                  parent_message : 사용자 정의 이벤트 이름\\r\\n                  getMessage : 이벤트를 실행할 함수\\r\\n                  자식 컴포넌트에서 부모 컴포넌트로 데이터 전달할때 이  방식을 사용합니다\\r\\n                  자식은 context.emit('parent_message', send_message.value); 처럼\\r\\n                  context.emit()메서드를 호출하면 됩니다\\r\\n                  첫번째 인자는 부모에서 정의한 이벤트 이름,\\r\\n                  두번째 인자는 부모에게 보낼 값 입니다\\r\\n    \"), _createVNode(_component_child, {\n    val: \"message\",\n    onParent_message: $setup.getMessage\n  }, null, 8\n  /* PROPS */\n  , [\"onParent_message\"]), _createElementVNode(\"input\", {\n    onInput: _cache[0] || (_cache[0] = (...args) => $setup.change && $setup.change(...args))\n  }, null, 32\n  /* HYDRATE_EVENTS */\n  ), _createElementVNode(\"div\", null, [_hoisted_2, _hoisted_3, _createElementVNode(\"span\", null, _toDisplayString($setup.showMessage), 1\n  /* TEXT */\n  )])]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;iDAiBJ;;gEAA2BC,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;;;;uBAjBlCC,oBAmBM,KAnBN,cAmBM,CAlBJC,onBAkBI,EAJJC,aAAmDC,gBAAnD,EAAmD;IAA5CC,GAAG,EAAC,SAAwC;IAA7BC,gBAAc,EAAEC;EAAa,CAAnD;;EAAA,uBAII,EAHJP,oBAAuB,OAAvB,EAAuB;IAAfQ,OAAK,yCAAED,uCAAF;EAAU,CAAvB;;EAAA,CAGI,EAFJP,oBACkC,KADlC,EACkC,IADlC,EACkC,aADFS,UACE,EAAlCT,oBAA4B,MAA5B,EAA4B,IAA5B,EAA4BU,iBAApBH,kBAAoB,CAA5B,EAAmB;EAAA;EAAnB,CAAkC,CADlC,CAEI,CAnBN","names":["class","_createElementVNode","_createElementBlock","_createCommentVNode","_createVNode","_component_child","val","onParent_message","$setup","onInput","_hoisted_3","_toDisplayString"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex16_component\\_4_emit\\parentView.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n    <!-- 1,  :val = \"message\"\r\n                  동적 속성을 전달하기 위한 콜론(:)을 사용합니다\r\n                  여기서 사용된 message는 자바스크립트의 속성입니다\r\n                  데이터 바이딩합니다\r\n            \r\n            2, @parent_message=\"getMessage\r\n                  parent_message : 사용자 정의 이벤트 이름\r\n                  getMessage : 이벤트를 실행할 함수\r\n                  자식 컴포넌트에서 부모 컴포넌트로 데이터 전달할때 이  방식을 사용합니다\r\n                  자식은 context.emit('parent_message', send_message.value); 처럼\r\n                  context.emit()메서드를 호출하면 됩니다\r\n                  첫번째 인자는 부모에서 정의한 이벤트 이름,\r\n                  두번째 인자는 부모에게 보낼 값 입니다\r\n    -->\r\n    <child val=\"message\" @parent_message=\"getMessage\"/>\r\n    <input @input=\"change\">\r\n    <div>여기는 부모 : 자식에게 받은 값을 출력하는 곳 <br>\r\n    <span>{{showMessage}}</span></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport child from './childView.vue'\r\nimport {ref} from 'vue'\r\nexport default {\r\n    components:{\r\n        child\r\n    },\r\n    emits:['message'],\r\n    setup(){\r\n      const message=ref('초기값');\r\n      const showMessage=ref('');\r\n\r\n      const getMessage = (value)=>{\r\n        console.log(value);\r\n        showMessage.value=value;\r\n      }\r\n\r\n      const  change = (event)=>{\r\n        context.emit('message', event.target.value);\r\n      }\r\n\r\n      return{\r\n        message, getMessage, showMessage, change\r\n      }\r\n    }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.parent{\r\n    background: cornsilk;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}