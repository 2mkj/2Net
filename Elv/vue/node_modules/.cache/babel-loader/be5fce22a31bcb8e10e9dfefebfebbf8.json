{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-5c173339\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"parent\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" 나는 부모입니다. \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_child = _resolveComponent(\"child\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createCommentVNode(\" 정적 속성 val의 값을 자식에게 전달합니다\"), _createVNode(_component_child, {\n    val: \"message\"\n  }), _createCommentVNode(\" 속성 val을 전달하지 않습니다. child 컴포넌트에서 val의 required:true로 설정했기 때문에 오류 발생합니다 \"), _createVNode(_component_child, {\n    val: $setup.message\n  }, null, 8\n  /* PROPS */\n  , [\"val\"]), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.message = $event)\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.message]])]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;iDAAS;;;;;uBAApBC,oBAQM,KARN,cAQM,aANJC,gDAMI,EALJC,aAAsBC,gBAAtB,EAAsB;IAAfC,GAAG,EAAC;EAAW,CAAtB,CAKI,EAHJH,8FAGI,EAFJC,aAAuBC,gBAAvB,EAAuB;IAAfC,GAAG,EAAEC;EAAU,CAAvB,EAAoB,IAApB,EAAoB;EAAA;EAApB,EAAoB,OAApB,CAEI,kBADJC,oBAAyB,OAAzB,EAAyB;+DAATD,iBAAOE;EAAE,CAAzB;;EAAA,kBAAgBF,iBACZ,CARN","names":["class","_createElementBlock","_createCommentVNode","_createVNode","_component_child","val","$setup","_createElementVNode","$event"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex16_component\\_3_props\\parentView.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n    나는 부모입니다.\r\n    <!-- 정적 속성 val의 값을 자식에게 전달합니다-->\r\n    <child val=\"message\"/>\r\n\r\n    <!-- 속성 val을 전달하지 않습니다. child 컴포넌트에서 val의 required:true로 설정했기 때문에 오류 발생합니다 -->\r\n    <child :val=\"message\"/>\r\n    <input v-model=\"message\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    /*     https://v3.ko.vuejs.org/guide/component-props.html#prop-타입\r\n              https://v3.ko.vuejs.org/guide/component-props.html#prop-유효성-검사\r\n\r\n        1. 컴포넌트랑\r\n        조합하여 화면을 구성할 수 있는 블록을 의미합니다.\r\n        컴포넌트를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며,\r\n        코드를 쉽게 이해하고 재사용할 수 있습니다.\r\n\r\n        2. 컴포넌트 사용법\r\n        (1) <script>에서 컴포넌의 위치와 이름을 import문으로 작성합니다.\r\n        (2) export default { 의 components 속성에 사용할 컴포넌트 이름을 작성합니다. \r\n        (3) <template>에서 컴포넌트를 배치합니다.\r\n    */\r\nimport child from './childView.vue'\r\nimport {ref} from 'vue'\r\nexport default {\r\n    components:{\r\n        child\r\n    },\r\n    setup(){\r\n      const message=ref('초기값');\r\n      return{\r\n        message\r\n      }\r\n    }\r\n\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.parent{\r\n    background: cornsilk;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}