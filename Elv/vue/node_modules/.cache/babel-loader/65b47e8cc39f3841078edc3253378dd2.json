{"ast":null,"code":"import { ref, watch } from 'vue';\nexport default {\n  setup() {\n    const isCheck = ref([]); //배열을 사용하면 체크한 값이 저장됩니다.\n\n    const isCheck2 = ref([]);\n    const isAll = ref(false); //선택하면 true, 해제하면 false값을 갖는다.\n\n    const all = () => {\n      if (isAll.value) {\n        isCheck2.value = [\"과일\", \"빵\", \"피자\"];\n      } else {\n        isCheck2.value = [];\n      }\n    }; //all\n\n\n    watch(isCheck2, () => {\n      isAll.value = isCheck2.value.length == 3 ? true : false;\n    });\n    return {\n      isCheck2,\n      isCheck,\n      isAll,\n      all\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAkCA,SAAQA,GAAR,EAAYC,KAAZ,QAAwB,KAAxB;AACA,eAAe;EACXC,KAAK,GAAE;IACH,MAAMC,OAAO,GAACH,GAAG,CAAC,EAAD,CAAjB,CADG,CACoB;;IACvB,MAAMI,QAAQ,GAACJ,GAAG,CAAC,EAAD,CAAlB;IACA,MAAMK,KAAI,GAAIL,GAAG,CAAC,KAAD,CAAjB,CAHG,CAGuB;;IAE1B,MAAMM,GAAE,GAAI,MAAM;MACd,IAAGD,KAAK,CAACE,KAAT,EAAe;QACXH,QAAQ,CAACG,KAAT,GAAiB,CAAC,IAAD,EAAM,GAAN,EAAU,IAAV,CAAjB;MACH,CAFD,MAEK;QACDH,QAAQ,CAACG,KAAT,GAAiB,EAAjB;MACJ;IACJ,CANA,CALG,CAWD;;;IACFN,KAAK,CAACG,QAAD,EAAW,MAAI;MAChBC,KAAK,CAACE,KAAN,GAAcH,QAAQ,CAACG,KAAT,CAAeC,MAAf,IAAuB,CAAvB,GAA2B,IAA3B,GAAkC,KAAhD;IACH,CAFI,CAAL;IAIA,OAAM;MACFJ,QADE;MACOD,OADP;MACeE,KADf;MACqBC;IADrB,CAAN;EAGJ;;AApBW,CAAf","names":["ref","watch","setup","isCheck","isCheck2","isAll","all","value","length"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex04_v_medel\\App06_checkbox_disabled.vue"],"sourcesContent":["<template>\r\n    <!-- \r\n        사용자가 입력한 값을 자바스크립트의 데이터로 입력하는 방법입니다.\r\n        태그와 데이터를 연결하기 위해 v-model 디렉티브를 사용합니다.\r\n        웹 페이지에서 입력한 값이 자바스크립트에 반영되므로 양방향 바인딩이라고도 합니다.\r\n\r\n        동의를 선택하면 전송버튼을 활성화하고\r\n        동의를 선택하지 않으면 전송버튼을 비활성화 합니다.\r\n\r\n     -->\r\n<div class=\"container\">\r\n<!-- \r\n        1. :disabled=\"true\" 이면 disabled 속성을 사용할 수 있습니다.\r\n            :disabled=\"false\" 이면 disabled 속성을 사용할 수 없습니다.\r\n -->\r\n <button class=\"btn btn-info btn-sm\" :disabled=\"false\">false</button>\r\n <button class=\"btn btn-info btn-sm\" :disabled=\"true\">true</button>\r\n\r\n <hr>\r\n <!-- \r\n        2. isCheck가 false 이면 disabled 속성을 갖고 isCheck가 true이면 disabled속성은 사라집니다.\r\n            즉, !isCheck의 값이 참인 경우 disabled 속성을 사용할 수 있습니다.\r\n    -->\r\n\r\n    <p>\r\n        <label><input type=\"checkbox\" v-model=\"isCheck\" value=\"동의\"></label>\r\n    </p>\r\n\r\n    <button class=\"btn btn-info btn-sm\" :disabled=\"!isCheck\">전송</button>\r\n\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {ref,watch} from 'vue';\r\nexport default {\r\n    setup(){\r\n        const isCheck=ref([]); //배열을 사용하면 체크한 값이 저장됩니다.\r\n        const isCheck2=ref([]); \r\n        const isAll = ref(false); //선택하면 true, 해제하면 false값을 갖는다.\r\n\r\n        const all = () => {\r\n            if(isAll.value){\r\n                isCheck2.value = [\"과일\",\"빵\",\"피자\"];\r\n            }else{\r\n                isCheck2.value = [];\r\n            }\r\n        } //all\r\n        watch(isCheck2, ()=>{\r\n            isAll.value = isCheck2.value.length==3 ? true : false ;\r\n        });\r\n\r\n        return{\r\n            isCheck2,isCheck,isAll,all\r\n        };\r\n    }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\nlabel {display:block}\r\n.green{color:green; font-weight: 900;}\r\n.orange{color:orange;}\r\n</style>"]},"metadata":{},"sourceType":"module"}