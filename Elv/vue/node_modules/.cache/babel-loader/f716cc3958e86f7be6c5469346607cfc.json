{"ast":null,"code":"import { createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\n\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"div\", null, \" 이곳은 게시판 페이지 입니다. (board.vue) \", -1\n/* HOISTED */\n);\n\nconst _hoisted_2 = {\n  value: \"this\",\n  ref: \"el\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_hoisted_1, _createElementVNode(\"input\", _hoisted_2, null, 512\n  /* NEED_PATCH */\n  )], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;gCACEA,oBAEM,KAFN,EAEM,IAFN,EAAK,gCAAL,EAEA;AAAA;AAFA;;;EAGOC,KAAK,EAAC;EAAOC,GAAG,EAAC;;;6DAHxBC,YAGAH,oBAA6B,OAA7B,cAA6B,IAA7B,EAA6B;EAAA;EAA7B","names":["_createElementVNode","value","ref","_hoisted_1"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex15_login\\component\\boardView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    이곳은 게시판 페이지 입니다. (board.vue)\r\n  </div>\r\n  <input value=\"this\" ref=\"el\">\r\n</template>\r\n\r\n<script>\r\nimport {ref, onMounted, onUnmounted, onBeforeMount} from 'vue'\r\nexport default {\r\n  setup(){\r\n    const el = ref(null);\r\n    console.log('[board]setup start')\r\n    /* \r\n    https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html\r\n    https://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#mounted\r\n    https://kr.vuejs.org/v2/guide/components.html\r\n    * Vue.js는 라이프 사이클을 미리 등록해서 적절한 시기에 자동으로 호출합니다\r\n      이러한 시점을 낚아채서(Hook) 우리가 원하는 처리를 할 수 있게 하는 것을 훅이라고 합니다\r\n\r\n      *작성법\r\n      1. 사용할 훅을 import 합니다.\r\n        예) import {onMounted, onUnmounted} from 'vue'\r\n      2. 실행할 코드를 매개변수의 콜백함수로 작성합니다.\r\n        예) onUnmounted(()=>{})\r\n\r\n    */\r\n\r\n    //컴포넌트 인스턴스가 마운트 되기 전(Dom에 추가되기 직전) 호출합니다\r\n    onBeforeMount(()=>{\r\n      console.log('[board]Component is onBeforeMount!');\r\n      console.log(el.value);    //null\r\n    })\r\n\r\n    //컴포넌트 인스턴스가 마운트 된 후 (Dom에 추가된 후) 호출합니다.\r\n    onMounted(()=>{\r\n      console.log('[board]Component is mounted!');\r\n      console.log(el.value.value);    //this\r\n    })\r\n      //컴포넌트 인스턴스가 마운트 해재(unmounted) 된 후 호출합니다.\r\n    onUnmounted(()=>{\r\n      console.log('[board]Component is onUnmounted!');\r\n      console.log(el.value);    //null\r\n    })\r\n    console.log('[board]setup end')\r\n\r\n    return {\r\n      el\r\n    }\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}