{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-035f0cd1\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" [child] 자식에서 입력합니다 : \");\n\nconst _hoisted_3 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_createTextVNode(\"[child]store에서 가져온 값 : \" + _toDisplayString($setup.message), 1\n  /* TEXT */\n  ), _hoisted_1, _hoisted_2, _createElementVNode(\"input\", {\n    onInput: _cache[0] || (_cache[0] = (...args) => _ctx.change && _ctx.change(...args)),\n    value: $setup.message\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_3)]);\n}","map":{"version":3,"mappings":";;;;gEACyCA,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;iDAAI;;;;uBAA3CC,oBAEQ,KAFR,EAEQ,IAFR,EAEQ,kBAFH,4BAAuBC,iBAAEC,cAAF,GAAS;EAAA;GAE7B,EAF+BC,UAE/B,cADeJ,oBAAwC,OAAxC,EAAwC;IAAhCK,OAAK,yCAAEC,mCAAF,CAA2B;IAAhBC,KAAK,EAAEJ;EAAS,CAAxC;;EAAA,aACf,CAFR","names":["_createElementVNode","_createElementBlock","_toDisplayString","$setup","_hoisted_1","onInput","_ctx","value"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex17_store\\_3\\childView.vue"],"sourcesContent":["<template>\r\n  <div>[child]store에서 가져온 값 : {{message}}<br>\r\n    [child] 자식에서 입력합니다 : <input @input=\"change\" :value=\"message\">\r\n    </div>\r\n</template>\r\n\r\n<script>\r\n  import {useStore} from 'vuex';\r\n  import {computed} from 'vue';\r\n  import {ref} from 'vue';\r\n  export default {\r\n    setup(){\r\n      const {state} = useStore();\r\n      const store_message = ref('');\r\n          \r\n      //state.message의 값이 바뀌면 message의 내용도 바뀝니다\r\n      message = computed(\r\n        ()=> state.message\r\n      );\r\n\r\n      const change = (event)=>{\r\n            store.dispatch('update', event.target.value);\r\n          }\r\n\r\n      return{\r\n        message, store_message\r\n      }\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n  div {background-color:rgb(128, 240, 234)}\r\n</style>"]},"metadata":{},"sourceType":"module"}