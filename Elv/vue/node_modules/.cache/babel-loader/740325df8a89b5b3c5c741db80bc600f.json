{"ast":null,"code":"import { ref, watch } from 'vue';\nimport axios from '../../axios/axiossetting.js';\nimport { useRouter } from 'vue-router';\nexport default {\n  setup() {\n    const join = ref({\n      id: '',\n      password: '',\n      name: '',\n      age: '',\n      gender: '남',\n      email: ''\n    });\n    const id_message = ref(\"\");\n    const email_message = ref(\"\");\n    const id_color = ref(\"\");\n    const email_color = ref(\"\");\n    const router = useRouter();\n\n    const idcheck = async () => {\n      try {\n        console.log(\"idcheck=\" + join.value.id); //const res = await axios.get(`members/idcheck?id=${join.value.id}`);  <- GET 방식\n\n        const res = await axios.get(\"/members/idcheck\", {\n          params: {\n            id: join.value.id\n          }\n        });\n        console.log(\"res.data=\" + res.data);\n\n        if (res.data == 1) {\n          id_message.value = \"이미 사용중인 아이디 입니다.\";\n          id_color.value = 'red';\n        } else {\n          id_message.value = \"사용 가능한 아이디 입니다.\";\n          id_color.value = 'green';\n        }\n      } catch (err) {\n        console.log(\"err\" + err);\n      }\n    }; //idcheck end\n\n    /* \r\n             1. 객체를 watch 하는 경우\r\n             watch(join.value, (next, prev)=>{\r\n               })\r\n             2. 객체의 속성 일부분을 watch하는 경우 첫번째 매개변수를 애로우 함수로 작성합니다\r\n                 watch(\r\n                     ()=> join.value.id,\r\n                     (next, prev)=>{\r\n                  })\r\n    */\n\n\n    watch(() => join.value.id, (next, prev) => {\n      console.log('watch(id) : ' + prev + \" => \" + next);\n      var pattern = /^\\w{5,12}$/;\n\n      if (!pattern.test(join.value.id)) {\n        id_message.value = \"영문자 숫자 _로 5~12자 가능합니다.\";\n        id_color.value = 'red';\n      } else {\n        idcheck();\n      } //else end\n\n    }); //watch end\n\n    watch(() => join.value.email, (next, prev) => {\n      console.log('watch(email) : ' + prev + \" => \" + next);\n      var pattern = /^\\w+@\\w+[.]\\w{3}$/;\n\n      if (!pattern.test(join.value.email)) {\n        email_message.value = \"이메일 형식이 맞지않습니다.\";\n        email_color.value = 'red';\n      } else {\n        email_message.value = \"이메일 형식이 일치합니다.\";\n        email_color.value = 'green';\n      } //else end\n\n    }); //watch end\n\n    const joinProcess = async () => {\n      if (id_color.value == 'red') {\n        alert(\"아이디를 확인하세요\");\n      } else if (email_color.value == \"red\") {\n        alert(\"email을 확인하세요\");\n      } else {\n        try {\n          const res = await axios.post('members/new', join.value);\n\n          if (res.data == 1) {\n            alert(\"회원 가입을 축하합니다.\");\n            router.push({\n              name: 'Login'\n            });\n          }\n        } catch (error) {\n          console.log(error);\n        }\n      }\n    };\n\n    return {\n      join,\n      id_message,\n      email_message,\n      id_color,\n      email_color,\n      joinProcess,\n      idcheck\n    };\n  }\n\n};","map":{"version":3,"mappings":"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","names":["ref","watch","axios","useRouter","setup","join","id","password","name","age","gender","email","id_message","email_message","id_color","email_color","router","idcheck","console","log","value","res","get","params","data","err","next","prev","pattern","test","joinProcess","alert","post","push","error"],"sourceRoot":"","sources":["C:\\Users\\user\\vue\\simple_vue_project\\Elv\\vue\\src\\component\\member\\member_join.vue"],"sourcesContent":["<template>\r\n    <form @submit.prevent=\"joinProcess\">\r\n    <h1>회원가입 페이지</h1>\r\n        <hr>\r\n        <b>아이디</b>\r\n        <!-- watch로 데이터 변화 확인합니다. lazy 붙지 않습니다.-->\r\n        <input type=\"text\" v-model=\"join.id\" required maxlength=\"12\" placeholder=\"Enter id\">\r\n        <span :class=\"id_color\">{{id_message}}</span>\r\n        \r\n        <b>비밀번호</b>\r\n        <input type=\"password\" v-model.lazy=\"join.password\" required placeholder=\"Enter password\">\r\n        \r\n        <b>이름</b>\r\n        <input type=\"text\" v-model.lazy=\"join.name\" maxlength=\"15\" required placeholder=\"Enter name\">\r\n        \r\n        <b>나이</b>\r\n        <input type=\"text\" maxlength=\"2\" v-model.lazy=\"join.age\" \r\n                            pattern=\"[1-9][0-9]\" required placeholder=\"Enter age\">\r\n    \r\n        <b>성별</b>\r\n        <div>\r\n            <input type=\"radio\" name=\"gender\" v-model.lazy=\"join.gender\" value=\"남\" checked><span>남자</span>\r\n            <input type=\"radio\" name=\"gender\" v-model.lazy=\"join.gender\" value=\"여\"><span>여자</span>\r\n        </div>\r\n        \r\n        <b>이메일 주소</b>\r\n        <input type=\"text\" v-model=\"join.email\" maxlength=\"30\" required placeholder=\"Enter email\">\r\n        <span :class=\"email_color\">{{email_message}}</span>\r\n        <div class=\"clearfix\">\r\n            <button type=\"submit\" class=\"submitbtn\">회원가입</button>\r\n            <button type=\"reset\" class=\"cancelbtn\">다시작성</button>\r\n        </div>\r\n    </form>\r\n    </template>\r\n    \r\n    <script>\r\n    import {ref,watch} from 'vue';\r\n    import axios from '../../axios/axiossetting.js';\r\n    import { useRouter } from 'vue-router';\r\n    export default {\r\n        setup(){\r\n            const join = ref({\r\n             id:'', \r\n             password:'',\r\n            name: '',\r\n             age:'',\r\n            gender:'남',\r\n            email:''\r\n       });\r\n       const id_message = ref(\"\");\r\n       const email_message = ref(\"\");\r\n       const id_color = ref(\"\");\r\n       const email_color = ref(\"\");\r\n\r\n       const router = useRouter();\r\n\r\n       const idcheck = async ()=>{\r\n        try{\r\n                console.log(\"idcheck=\"+join.value.id);\r\n                //const res = await axios.get(`members/idcheck?id=${join.value.id}`);  <- GET 방식\r\n                const res = await axios.get(\"/members/idcheck\", {params : { id : join.value.id } } );\r\n                console.log(\"res.data=\"+res.data);\r\n                if(res.data==1){\r\n                    id_message.value=\"이미 사용중인 아이디 입니다.\";\r\n                    id_color.value='red';\r\n                }else{\r\n                    id_message.value=\"사용 가능한 아이디 입니다.\";\r\n                    id_color.value='green';\r\n                }\r\n        }catch(err){\r\n            console.log(\"err\"+err)\r\n        }\r\n       }//idcheck end\r\n\r\n       /* \r\n                1. 객체를 watch 하는 경우\r\n                watch(join.value, (next, prev)=>{\r\n\r\n                })\r\n                2. 객체의 속성 일부분을 watch하는 경우 첫번째 매개변수를 애로우 함수로 작성합니다\r\n                    watch(\r\n                        ()=> join.value.id,\r\n                        (next, prev)=>{\r\n                     })\r\n       */\r\n    \r\n        watch(\r\n            ()=> join.value.id,\r\n            (next, prev)=>{\r\n                        console.log('watch(id) : ' + prev + \" => \" + next)\r\n           var pattern = /^\\w{5,12}$/;\r\n                    if(!pattern.test(join.value.id )){\r\n                                id_message.value=\"영문자 숫자 _로 5~12자 가능합니다.\";\r\n                                id_color.value='red';\r\n                    }else{\r\n                                idcheck();\r\n                    }//else end\r\n        })//watch end\r\n\r\n        watch(()=> join.value.email,\r\n            (next, prev)=>{\r\n                  console.log('watch(email) : ' + prev + \" => \" + next)\r\n                  var pattern = /^\\w+@\\w+[.]\\w{3}$/;\r\n                    if(!pattern.test(join.value.email )){\r\n                        email_message.value=\"이메일 형식이 맞지않습니다.\";\r\n                        email_color.value='red';\r\n                    }else{\r\n                        email_message.value=\"이메일 형식이 일치합니다.\";\r\n                        email_color.value='green';\r\n                    }//else end\r\n        })//watch end\r\n        \r\n        const joinProcess = async () =>{\r\n            if(id_color.value=='red'){\r\n                alert(\"아이디를 확인하세요\");\r\n            }else if(email_color.value==\"red\"){\r\n                alert(\"email을 확인하세요\");\r\n            }else{\r\n                try{\r\n                        const res = await axios.post('members/new',join.value);\r\n                        if(res.data==1){\r\n                            alert(\"회원 가입을 축하합니다.\")\r\n                            router.push({\r\n                                        name:'Login'\r\n                            });\r\n                        }\r\n                }catch(error){\r\n                    console.log(error)\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n            return{\r\n                join,id_message,email_message,id_color,email_color, joinProcess, idcheck\r\n            };\r\n        }\r\n    };\r\n    \r\n    </script>\r\n    \r\n    <style scoped>\r\n        .red{color:red}\r\n        .green{color:green}\r\n         input[type=text] + span{   position: relative;\r\n                top: -20px;\r\n         }\r\n        form {font-family: Arial, Helvetica, sans-serif;}\r\n        * {box-sizing: border-box}\r\n        \r\n        \r\n        input{border-radius:3px;border:1px solid lightgray}\r\n        input[type=text], input[type=password] {\r\n            width: 100%;\r\n            padding: 10px;\r\n            margin: 5px 0 22px 0;\r\n            display: inline-block;\r\n           \r\n        }\r\n        \r\n        \r\n        input[type=radio]{\r\n            width: 5%;\r\n            display: inline-block;\r\n            border: none;\r\n        }\r\n        \r\n        \r\n        input[type=text]:focus, input[type=password]:focus {\r\n          box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);\r\n            outline: none;\r\n        }\r\n        button {\r\n            background-color: #4CAF50;\r\n            color: white;\r\n            padding: 14px 20px;\r\n            margin: 8px 0;\r\n            border: none;\r\n            cursor: pointer; /* 손가락 커서 모양 */\r\n            width: 100%;\r\n            opacity: 0.9;\r\n        }\r\n        \r\n        button:hover {\r\n            opacity:1;\r\n            \r\n        }\r\n        button:focus{\r\n           outline:none;\r\n        }\r\n        \r\n        /* 취소 버튼*/\r\n        .cancelbtn {\r\n            padding: 14px 20px;\r\n            background-color: #f44336;\r\n        }\r\n        \r\n        .cancelbtn, .submitbtn {\r\n          float: left;\r\n          width: 50%;\r\n        }\r\n        form {\r\n            background-color: #fefefe;\r\n            margin: 5% auto 15% auto; /* 5% from the top, 15% from the bottom and centered */\r\n            border: 1px solid lightgray;\r\n            width: 600px; /* Could be more or less, depending on screen size */\r\n            padding: 16px;\r\n        }\r\n        \r\n        hr {\r\n            border: 1px solid #f1f1f1;\r\n            margin-bottom: 25px;\r\n        }\r\n         \r\n        b + div{width: 100%;\r\n            padding: 10px;\r\n            margin: 5px 0 22px 0;\r\n            display: inline-block;\r\n            border: none;\r\n            background: #f1f1f1;}\r\n        \r\n        /* Clear floats */\r\n        .clearfix::after {\r\n            content: \"\";\r\n            clear: both;\r\n            display: table; \r\n        }\r\n        \r\n        h1{text-align:center}\r\n        \r\n        b {\r\n            width: 100%;\r\n            display: block\r\n        }\r\n        \r\n        span{display:inline-block;margin-top:-20px;font-size:10px}\r\n        \r\n    </style>"]},"metadata":{},"sourceType":"module"}