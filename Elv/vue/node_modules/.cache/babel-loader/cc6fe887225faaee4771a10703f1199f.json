{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-cae11460\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"parent\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_withScopeId(() => /*#__PURE__*/_createElementVNode(\"br\", null, null, -1\n/* HOISTED */\n));\n\nconst _hoisted_3 = /*#__PURE__*/_createTextVNode(\" 부모에서 입력합니다. \");\n\nconst _hoisted_4 = [\"value\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_child = _resolveComponent(\"child\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createVNode(_component_child), _createTextVNode(\" [parent]store에서 가져온 값 : \" + _toDisplayString($setup.store_message), 1\n  /* TEXT */\n  ), _hoisted_2, _hoisted_3, _createElementVNode(\"input\", {\n    onInput: _cache[0] || (_cache[0] = (...args) => $setup.change && $setup.change(...args)),\n    value: $setup.store_message\n  }, null, 40\n  /* PROPS, HYDRATE_EVENTS */\n  , _hoisted_4)]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;gEAEgCC,oBAAI,IAAJ,EAAI,IAAJ,EAAI,IAAJ,EAAI;AAAA;AAAJ;;iDAAI;;;;;;uBAF/CC,oBAIM,KAJN,cAIM,CAHJC,aAAeC,gBAAf,CAGI,mBAHW,8BACSC,iBAAEC,oBAAF,GAAe;EAAA;GAEnC,EAFqCC,UAErC,cADQN,oBAA8C,OAA9C,EAA8C;IAAtCO,OAAK,yCAAEF,uCAAF,CAAiC;IAAtBG,KAAK,EAAEH;EAAe,CAA9C;;EAAA,aACR,CAJN","names":["class","_createElementVNode","_createElementBlock","_createVNode","_component_child","_toDisplayString","$setup","_hoisted_2","onInput","value"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex17_store\\_2\\parentView.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n    <child></child>\r\n    [parent]store에서 가져온 값 : {{store_message}}<br>\r\n    부모에서 입력합니다. <input @input=\"change\" :value=\"store_message\">\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport child from './childView.vue';\r\nimport {ref} from 'vue';\r\nimport {useStore} from 'vuex';\r\nexport default {\r\n    components:{\r\n        child\r\n    },\r\n    setup(){\r\n          const store_message = ref('');\r\n          const store = useStore();\r\n          store_message.value = store.state.message;\r\n          \r\n\r\n          //부모에서 입력한 값의 변화가 있으면 store에 저장되도록\r\n          //store.dispatch('actions 함수명', '저장할 값')를 호출합니다\r\n          //store에서 actions의 update()가 실행됩니다\r\n          const change = (event)=>{\r\n            store.dispatch('update', event.target.value);\r\n          }\r\n\r\n          return{\r\n            change, store_message\r\n          }\r\n      }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.parent{\r\n    background: rgb(255, 240, 180);\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module"}