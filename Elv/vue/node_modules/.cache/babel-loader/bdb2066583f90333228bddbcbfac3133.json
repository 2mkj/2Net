{"ast":null,"code":"import { useRouter } from 'vue-router';\nimport { ref } from 'vue'; //npm install vue-cookies\n\nimport cookies from 'vue-cookies'; //vue에서 쿠키를 사용하기 위한 cookies를 import합니다.\n\nimport axios from '../../axios/axiossetting.js';\nexport default {\n  emits: [\"parent_getSession\"],\n\n  setup(props, context) {\n    //부모 컴포넌트 App_1.vue에 있는 getSession을 호출합니다.\n    //<router-view @parent_getSession=\"getSession\" :parent_id=\"id\" />\n    console.log('member_login : setup');\n    context.emit(\"parent_getSession\", \"\");\n    const router = useRouter(); //useRouter()는 라우터 인스턴스를 반환합니다.\n\n    const join = () => {\n      router.push({\n        name: 'Join'\n      });\n    };\n\n    const remember = ref(false);\n    const id = ref(\"\");\n    const password = ref(\"\");\n\n    const getCookie = () => {\n      //이름이 saveid인 쿠키를 가져옵니다.\n      const cookie_value = cookies.get(\"saveid\");\n      console.log(\"가져온 쿠키값=\" + cookie_value);\n\n      if (cookie_value != null) {\n        remember.value = true; //체크박스 체크합니다.\n\n        id.value = cookie_value; //쿠키에 저장된 아이디값 input에 나타납니다.\n      } else {\n        remember.value = false; //체크박스 해제합니다.\n      }\n    };\n\n    getCookie();\n\n    const loginProcess = async () => {\n      try {\n        const res = await axios.post(\"members\", {\n          id: id.value,\n          password: password.value\n        });\n        console.log(\"login.vue:res.data=\" + res.data);\n        const result = res.data;\n\n        if (result == -1) {\n          alert(\"아이디가 존재하지 않습니다.\");\n        } else if (result == 0) {\n          alert(\"비밀번호가 일치하지 않습니다.\");\n        } else if (result == 1) {\n          console.log(\"remember\" + remember.value);\n\n          if (remember.value) {\n            //체크박스 선택한 경우\n\n            /* \r\n                set(name, value, expire) : expire(만료일)을 갖는 name과 value를 가진 쿠키를 설정합니다.\r\n                  1s : 1초\r\n                  1h : 1시간 (60*60)\r\n                  1d : 1일 (24*60*60)\r\n                  1m : 1달\r\n                  new Date(2021,08,30).toUTCString() : 특정 시간\r\n                            (toUTCString() - 날짜를 UTC(협정 세계시) 형식으로 표현합니다.)\r\n            */\n            cookies.set(\"saveid\", id.value, \"1d\"); //1일 동안 유효한 쿠키를 설정합니다.\n            //cookies.set(\"saveid\", id.value, 24*60*60)\n          } else {\n            //체크박스 해제한 경우\n            cookies.remove(\"saveid\"); //쿠키 제거\n          }\n\n          router.push({\n            name: \"Board_List\"\n          });\n        }\n      } catch (err) {\n        console.log(err);\n      }\n    }; // loginProcess end\n\n\n    return {\n      join,\n      id,\n      password,\n      loginProcess,\n      remember\n    };\n  } //setup\n\n\n};","map":{"version":3,"mappings":"AAoBA,SAAQA,SAAR,QAAwB,YAAxB;AACA,SAAQC,GAAR,QAAkB,KAAlB,C,CACA;;AACA,OAAOC,OAAP,MAAoB,aAApB,C,CAAmC;;AACnC,OAAOC,KAAP,MAAkB,6BAAlB;AACA,eAAe;EACbC,KAAK,EAAC,CAAC,mBAAD,CADO;;EAEbC,KAAK,CAACC,KAAD,EAAQC,OAAR,EAAgB;IACnB;IACA;IACAC,OAAO,CAACC,GAAR,CAAY,sBAAZ;IACAF,OAAO,CAACG,IAAR,CAAa,mBAAb,EAAkC,EAAlC;IAEA,MAAMC,MAAK,GAAIX,SAAS,EAAxB,CANmB,CAMS;;IAC5B,MAAMY,IAAG,GAAI,MAAM;MACjBD,MAAM,CAACE,IAAP,CAAY;QACVC,IAAI,EAAC;MADK,CAAZ;IAGF,CAJA;;IAMA,MAAMC,QAAO,GAAId,GAAG,CAAC,KAAD,CAApB;IACA,MAAMe,EAAC,GAAGf,GAAG,CAAC,EAAD,CAAb;IACA,MAAMgB,QAAO,GAAIhB,GAAG,CAAC,EAAD,CAApB;;IAEA,MAAMiB,SAAQ,GAAI,MAAM;MACtB;MACA,MAAMC,YAAW,GAAIjB,OAAO,CAACkB,GAAR,CAAY,QAAZ,CAArB;MACAZ,OAAO,CAACC,GAAR,CAAY,aAAWU,YAAvB;;MACA,IAAGA,YAAY,IAAE,IAAjB,EAAsB;QACpBJ,QAAQ,CAACM,KAAT,GAAe,IAAf,CADoB,CACC;;QACrBL,EAAE,CAACK,KAAH,GAAWF,YAAX,CAFoB,CAEK;MAC3B,CAHA,MAGO;QACLJ,QAAQ,CAACM,KAAT,GAAe,KAAf,CADK,CACiB;MACxB;IACF,CAVA;;IAWAH,SAAS;;IAET,MAAMI,YAAW,GAAI,YAAY;MAC/B,IAAG;QACK,MAAMC,GAAE,GAAI,MAAMpB,KAAK,CAACqB,IAAN,CAAW,SAAX,EAAqB;UACrCR,EAAC,EAAIA,EAAE,CAACK,KAD6B;UAErCJ,QAAQ,EAAEA,QAAQ,CAACI;QAFkB,CAArB,CAAlB;QAIIb,OAAO,CAACC,GAAR,CAAY,wBAAsBc,GAAG,CAACE,IAAtC;QACA,MAAMC,MAAK,GAAIH,GAAG,CAACE,IAAnB;;QACA,IAAGC,MAAK,IAAK,CAAC,CAAd,EAAgB;UACdC,KAAK,CAAC,iBAAD,CAAL;QACD,CAFD,MAEM,IAAGD,MAAK,IAAK,CAAb,EAAe;UACnBC,KAAK,CAAC,kBAAD,CAAL;QACD,CAFK,MAEA,IAAGD,MAAK,IAAK,CAAb,EAAe;UAEnBlB,OAAO,CAACC,GAAR,CAAY,aAAaM,QAAQ,CAACM,KAAlC;;UAEA,IAAGN,QAAQ,CAACM,KAAZ,EAAkB;YAAE;;YAClB;;;;;;;;;YASFnB,OAAO,CAAC0B,GAAR,CAAY,QAAZ,EAAsBZ,EAAE,CAACK,KAAzB,EAAgC,IAAhC,EAVkB,CAUqB;YACvC;UACC,CAZD,MAYM;YAAE;YACNnB,OAAO,CAAC2B,MAAR,CAAe,QAAf,EADI,CACsB;UAC5B;;UAEElB,MAAM,CAACE,IAAP,CAAY;YACVC,IAAG,EAAI;UADG,CAAZ;QAGJ;MACT,CAnCH,CAmCG,OAAMgB,GAAN,EAAU;QACTtB,OAAO,CAACC,GAAR,CAAYqB,GAAZ;MACF;IACD,CAvCH,CA9BmB,CAqEd;;;IAEL,OAAO;MACLlB,IADK;MACCI,EADD;MACKC,QADL;MACeK,YADf;MAC6BP;IAD7B,CAAP;EAGH,CA5Ec,CA4Eb;;;AA5Ea,CAAf","names":["useRouter","ref","cookies","axios","emits","setup","props","context","console","log","emit","router","join","push","name","remember","id","password","getCookie","cookie_value","get","value","loginProcess","res","post","data","result","alert","set","remove","err"],"sourceRoot":"","sources":["C:\\Users\\user\\vue\\simple_vue_project\\Elv\\vue\\src\\vue\\component\\member\\member_login.vue"],"sourcesContent":["<template>\r\n  <form @submit.prevent=\"loginProcess\">\r\n    <h1>로그인</h1>\r\n    <hr>\r\n    <b>아이디</b>\r\n    <input type=\"text\" v-model=\"id\" name=\"id\" placeholder=\"Enter id\" required>\r\n\r\n    <b>비밀번호</b>\r\n    <input type=\"password\" v-model=\"password\" name=\"password\" placeholder=\"Enter password\" required>\r\n    <label>\r\n      <input type=\"checkbox\" name=\"remember\" style=\"margin-bottom:15px\">Remember me\r\n    </label>\r\n    <div class=\"clearfix\">\r\n      <button type=\"submit\" class=\"submitbtn\">로그인</button>\r\n      <button type=\"button\" class=\"join\" @click=\"join\">회원가입</button>\r\n    </div>\r\n  </form>\r\n</template>\r\n\r\n<script>\r\nimport {useRouter} from 'vue-router'\r\nimport {ref} from 'vue';\r\n//npm install vue-cookies\r\nimport cookies from 'vue-cookies'; //vue에서 쿠키를 사용하기 위한 cookies를 import합니다.\r\nimport axios from '../../axios/axiossetting.js';\r\nexport default {\r\n  emits:[\"parent_getSession\"],\r\n  setup(props, context){\r\n    //부모 컴포넌트 App_1.vue에 있는 getSession을 호출합니다.\r\n    //<router-view @parent_getSession=\"getSession\" :parent_id=\"id\" />\r\n    console.log('member_login : setup')\r\n    context.emit(\"parent_getSession\", \"\");\r\n\r\n    const router = useRouter(); //useRouter()는 라우터 인스턴스를 반환합니다.\r\n    const join = () => {\r\n      router.push({\r\n        name:'Join'\r\n      });\r\n    }\r\n\r\n    const remember = ref(false);\r\n    const id =ref(\"\");\r\n    const password = ref(\"\");\r\n\r\n    const getCookie = () => {\r\n      //이름이 saveid인 쿠키를 가져옵니다.\r\n      const cookie_value = cookies.get(\"saveid\");\r\n      console.log(\"가져온 쿠키값=\"+cookie_value);\r\n      if(cookie_value!=null){\r\n        remember.value=true; //체크박스 체크합니다.\r\n        id.value = cookie_value; //쿠키에 저장된 아이디값 input에 나타납니다.\r\n      } else {\r\n        remember.value=false; //체크박스 해제합니다.\r\n      }\r\n    }\r\n    getCookie();\r\n\r\n    const loginProcess = async () => {\r\n      try{\r\n              const res = await axios.post(\"members\",{\r\n                id : id.value,\r\n                password: password.value\r\n              });\r\n                  console.log(\"login.vue:res.data=\"+res.data);\r\n                  const result = res.data;\r\n                  if(result == -1){\r\n                    alert(\"아이디가 존재하지 않습니다.\");\r\n                  }else if(result == 0){\r\n                    alert(\"비밀번호가 일치하지 않습니다.\");\r\n                  }else if(result == 1){\r\n                    \r\n                    console.log(\"remember\" + remember.value);\r\n                  \r\n                    if(remember.value){ //체크박스 선택한 경우\r\n                      /* \r\n                          set(name, value, expire) : expire(만료일)을 갖는 name과 value를 가진 쿠키를 설정합니다.\r\n                            1s : 1초\r\n                            1h : 1시간 (60*60)\r\n                            1d : 1일 (24*60*60)\r\n                            1m : 1달\r\n                            new Date(2021,08,30).toUTCString() : 특정 시간\r\n                                      (toUTCString() - 날짜를 UTC(협정 세계시) 형식으로 표현합니다.)\r\n                      */\r\n                    cookies.set(\"saveid\", id.value, \"1d\"); //1일 동안 유효한 쿠키를 설정합니다.\r\n                    //cookies.set(\"saveid\", id.value, 24*60*60)\r\n                    }else { //체크박스 해제한 경우\r\n                      cookies.remove(\"saveid\"); //쿠키 제거\r\n                    }\r\n\r\n                      router.push({\r\n                        name : \"Board_List\"\r\n                      });\r\n                  }\r\n        }catch(err){\r\n          console.log(err);\r\n        }\r\n      }; // loginProcess end\r\n\r\n    return {\r\n      join, id, password, loginProcess, remember\r\n    };\r\n},//setup\r\n};\r\n</script>\r\n<style scoped>\r\nbody {font-family: Arial, Helvetica, sans-serif;}\r\n\r\n* {box-sizing: border-box}\r\n\r\ninput{border-radius:3px;border:1px solid lightgray}\r\ninput[type=text], input[type=password] {\r\n    width: 100%;\r\n    padding: 10px;\r\n    margin: 5px 0 22px 0;\r\n    display: inline-block;\r\n}\r\n\r\n\r\ninput[type=text]:focus, input[type=password]:focus {\r\n    box-shadow: 0 0 0 0.2rem rgba(0,123,255,.25);\r\n    outline: none;\r\n}\r\n\r\nbutton {\r\n    background-color: #4CAF50;\r\n    color: white;\r\n    padding: 14px 20px;\r\n    margin: 8px 0;\r\n    border: none;\r\n    cursor: pointer;\r\n    width: 100%;\r\n    opacity: 0.9;\r\n}\r\nbutton:nth-child(1){border-radius:3px 0 0 3px}\r\nbutton:nth-child(2){border-radius:0 3px 3px 0px}\r\nbutton:hover {\r\n    opacity:1;\r\n    \r\n}\r\nbutton:focus{\r\n   outline:none;\r\n}\r\n\r\n\r\n.join{\r\n    padding: 14px 20px;\r\n    background-color: #f44336;\r\n}\r\n\r\n.join, .submitbtn {\r\n  height:45px;\r\n  float: left;\r\n  width: 50%;\r\n}\r\na{color:white;text-decoration:none;}\r\n\r\nform {\r\n    background-color: #fefefe;\r\n    margin: 5% auto 15% auto; /* 5% from the top, 15% from the bottom and centered */\r\n    border: 1px solid lightgray;\r\n    width: 500px; /* Could be more or less, depending on screen size */\r\n    padding: 16px;\r\n}\r\n\r\nhr {\r\n    border: 1px solid #f1f1f1;\r\n    margin-bottom: 25px;\r\n}\r\n \r\n h1{text-align:center}\r\n\r\n/* Clear floats */\r\n.clearfix::after {\r\n    content: \"\";\r\n    clear: both;\r\n    display: table; \r\n}\r\nspan{vertical-align: top}\r\n\r\n@media screen and (max-width: 300px) {\r\n    .join, .signupbtn {\r\n       width: 100%;\r\n    }\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}