{"ast":null,"code":"import { createStore } from \"vuex\";\nexport default createStore({\n  //공통으로 사용할 변수를 정의합니다.\n  state: {\n    message: '초기값'\n  },\n  mutations: {\n    //state의 값을 변경하는 곳입니다.\n    //mutations를 실행 시키는 역할을 하는 actions에서\n    //comit('함수명', '전달인자')로 실행시킬 수 있습니다\n    update_id(state, payload) {\n      //update_id 는 commit()에서 사용된 첫번째 '함수명' 입니다.\n      //첫번째 매개변수 state는 mutations에서\n      //state속성을 사용할 수 있도록 전달 받습니다\n      //두번째 매개변수는 commit()에서 사용된 두번째 '전달인자'입니다.\n      state.message = payload; //5번라인 state의 속성 message에 전달인자값을 대입합니다\n\n      console.log('[store/index.js]mutations=' + payload);\n    }\n\n  },\n  actions: {\n    //mutations = 실행시키는 역할을 합니다.\n    //mutations 이 실행되면 state도 변경됩니다. 비동기 처리합니다.\n    //dispatch('함수명', '전달인자')로 실행 시킬 수 있습니다.\n    update(context, getMessage) {\n      //update는 dispatch()에서 사용된 첫번째 함수명입니다.\n      // 첫번째 매개변수 context는 commit()를 실행시킬 수 있는 객체를 전달 받습니다\n      //두번째 매개변수 getMessage는 dispatch()의 '전달인자'입니다.\n      //context.commit(mutations에 정의된 함수이름, 함수에 넘길 값)\n      context.commit('update_id', getMessage);\n      console.log('[store/index.js]actions=' + getMessage);\n    }\n\n  }\n});","map":{"version":3,"names":["createStore","state","message","mutations","update_id","payload","console","log","actions","update","context","getMessage","commit"],"sources":["C:/vue_project/vue3-first/src/ex17_store/_3/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\r\nexport default createStore({\r\n    //공통으로 사용할 변수를 정의합니다.\r\n    state:{\r\n        message:'초기값'\r\n    },\r\n    mutations:{ //state의 값을 변경하는 곳입니다.\r\n                        //mutations를 실행 시키는 역할을 하는 actions에서\r\n                        //comit('함수명', '전달인자')로 실행시킬 수 있습니다\r\n        update_id(state, payload){ //update_id 는 commit()에서 사용된 첫번째 '함수명' 입니다.\r\n                                                    //첫번째 매개변수 state는 mutations에서\r\n                                                    //state속성을 사용할 수 있도록 전달 받습니다\r\n                                                    //두번째 매개변수는 commit()에서 사용된 두번째 '전달인자'입니다.\r\n            state.message = payload; //5번라인 state의 속성 message에 전달인자값을 대입합니다\r\n            console.log('[store/index.js]mutations=' + payload);\r\n        }\r\n    },\r\n    actions:{ //mutations = 실행시키는 역할을 합니다.\r\n                    //mutations 이 실행되면 state도 변경됩니다. 비동기 처리합니다.\r\n                     //dispatch('함수명', '전달인자')로 실행 시킬 수 있습니다.\r\n        update(context, getMessage){//update는 dispatch()에서 사용된 첫번째 함수명입니다.\r\n                                                        // 첫번째 매개변수 context는 commit()를 실행시킬 수 있는 객체를 전달 받습니다\r\n                                                        //두번째 매개변수 getMessage는 dispatch()의 '전달인자'입니다.\r\n                                                        //context.commit(mutations에 정의된 함수이름, 함수에 넘길 값)\r\n        context.commit('update_id', getMessage);\r\n        console.log('[store/index.js]actions=' + getMessage);\r\n        },\r\n    }\r\n});"],"mappings":"AAAA,SAASA,WAAT,QAA4B,MAA5B;AACA,eAAeA,WAAW,CAAC;EACvB;EACAC,KAAK,EAAC;IACFC,OAAO,EAAC;EADN,CAFiB;EAKvBC,SAAS,EAAC;IAAE;IACQ;IACA;IAChBC,SAAS,CAACH,KAAD,EAAQI,OAAR,EAAgB;MAAE;MACiB;MACA;MACA;MACxCJ,KAAK,CAACC,OAAN,GAAgBG,OAAhB,CAJqB,CAII;;MACzBC,OAAO,CAACC,GAAR,CAAY,+BAA+BF,OAA3C;IACH;;EATK,CALa;EAgBvBG,OAAO,EAAC;IAAE;IACM;IACC;IACbC,MAAM,CAACC,OAAD,EAAUC,UAAV,EAAqB;MAAC;MACoB;MACA;MACA;MAChDD,OAAO,CAACE,MAAR,CAAe,WAAf,EAA4BD,UAA5B;MACAL,OAAO,CAACC,GAAR,CAAY,6BAA6BI,UAAzC;IACC;;EATG;AAhBe,CAAD,CAA1B"},"metadata":{},"sourceType":"module"}