{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, vModelText as _vModelText, createElementVNode as _createElementVNode, withDirectives as _withDirectives, toDisplayString as _toDisplayString, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-031e53d6\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\"\\r\\n사용자가 입력한 값을 자바스크립트의 데이터로 입력하는 방법입니다.\\r\\n태그와 데이터를 연결하기 위해 v-model 디렉티브를 사용합니다.\\r\\n웹 페이지에서 입력한 값이 자바스크립트에 반영 되므로 양방향 바인딩이라고도 합니다.\\r\\n\"), _createElementVNode(\"div\", _hoisted_1, [_withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $setup.name = $event),\n    class: \"form-control\"\n  }, null, 512\n  /* NEED_PATCH */\n  ), [[_vModelText, $setup.name, void 0, {\n    lazy: true\n  }]]), _createElementVNode(\"p\", null, _toDisplayString($setup.name), 1\n  /* TEXT */\n  )])], 2112\n  /* STABLE_FRAGMENT, DEV_ROOT_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;;;;EAMKA,KAAK,EAAC;;;6DALXC,gKAKAC,oBAGM,KAHN,cAGM,iBAFEA,oBAAgD,OAAhD,EAAgD;+DAA3BC,cAAIC,OAAuB;IAArBJ,KAAK,EAAC;EAAe,CAAhD;;EAAA,kBAAqBG;UAAd;MAET,EADED,oBAAe,GAAf,EAAe,IAAf,EAAeG,iBAAVF,WAAU,CAAf,EAAS;EAAA;EAAT,CACF,CAHN","names":["class","_createCommentVNode","_createElementVNode","$setup","$event","_toDisplayString"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex04_v_medel\\App11_lazy.vue"],"sourcesContent":["<template>\r\n<!--\r\n사용자가 입력한 값을 자바스크립트의 데이터로 입력하는 방법입니다.\r\n태그와 데이터를 연결하기 위해 v-model 디렉티브를 사용합니다.\r\n웹 페이지에서 입력한 값이 자바스크립트에 반영 되므로 양방향 바인딩이라고도 합니다.\r\n-->\r\n<div class=\"container\">\r\n        <input v-model.lazy=\"name\" class=\"form-control\">\r\n        <p>{{name}}</p>\r\n</div>\r\n</template>\r\n\r\n<script>\r\nimport {ref,watch} from 'vue';\r\nexport default {\r\n    setup(){\r\n        const name = ref('');\r\n\r\n        // name에 변화가 생기면 두번째 매개변수로 작성한 애로우 함수가 실행됩니다.\r\n        watch(name, (curr, prev) => {\r\n            console.log(prev + \"=>\" + curr + '; name.value= ' + name.value);\r\n        })\r\n        return{\r\n            name\r\n        };\r\n    }\r\n};\r\n\r\n</script>\r\n\r\n<style scoped>\r\nlabel {display:block}\r\n</style>"]},"metadata":{},"sourceType":"module"}