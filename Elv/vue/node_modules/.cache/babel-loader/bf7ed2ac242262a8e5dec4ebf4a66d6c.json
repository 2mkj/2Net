{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createTextVNode as _createTextVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-54dd0ecc\"), n = n(), _popScopeId(), n);\n\nconst _hoisted_1 = {\n  class: \"parent\"\n};\n\nconst _hoisted_2 = /*#__PURE__*/_createTextVNode(\" 나는 부모입니다. \");\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_child = _resolveComponent(\"child\");\n\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_hoisted_2, _createVNode(_component_child, {\n    val: \"나는 부모\"\n  })]);\n}","map":{"version":3,"mappings":";;;;;EACOA,KAAK,EAAC;;;iDAAS;;;;;uBAApBC,oBAGM,KAHN,cAGM,aADJC,aAAoBC,gBAApB,EAAoB;IAAbC,GAAG,EAAC;EAAS,CAApB,CACI,CAHN","names":["class","_createElementBlock","_createVNode","_component_child","val"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex16_component\\_2_props\\parentView.vue"],"sourcesContent":["<template>\r\n  <div class=\"parent\">\r\n    나는 부모입니다.\r\n    <child val=\"나는 부모\"/>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    /*      https://kr.vuejs.org/v2/guide/components.htm\r\n\r\n        1. 컴포넌트랑\r\n        조합하여 화면을 구성할 수 있는 블록을 의미합니다.\r\n        컴포넌트를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며,\r\n        코드를 쉽게 이해하고 재사용할 수 있습니다.\r\n\r\n        2. 컴포넌트 사용법\r\n        (1) <script>에서 컴포넌의 위치와 이름을 import문으로 작성합니다.\r\n        (2) export default { 의 components 속성에 사용할 컴포넌트 이름을 작성합니다. \r\n        (3) <template>에서 컴포넌트를 배치합니다.\r\n    */\r\nimport child from './childView.vue'\r\nexport default {\r\n    components:{\r\n        child\r\n    }\r\n\r\n}\r\n</script>\r\n\r\n<style scoped>\r\n.parent{\r\n    background: cornsilk;\r\n}\r\n</style>"]},"metadata":{},"sourceType":"module"}