{"ast":null,"code":"import { ref, onMounted, onUnmounted, onBeforeMount } from 'vue';\nexport default {\n  setup() {\n    const el = ref(null);\n    console.log('[board]setup start');\n    /* \r\n    https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html\r\n    https://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#mounted\r\n    https://kr.vuejs.org/v2/guide/components.html\r\n    * Vue.js는 라이프 사이클을 미리 등록해서 적절한 시기에 자동으로 호출합니다\r\n      이러한 시점을 낚아채서(Hook) 우리가 원하는 처리를 할 수 있게 하는 것을 훅이라고 합니다\r\n        *작성법\r\n      1. 사용할 훅을 import 합니다.\r\n        예) import {onMounted, onUnmounted} from 'vue'\r\n      2. 실행할 코드를 매개변수의 콜백함수로 작성합니다.\r\n        예) onUnmounted(()=>{})\r\n      */\n    //컴포넌트 인스턴스가 마운트 되기 전(Dom에 추가되기 직전) 호출합니다\n\n    onBeforeMount(() => {\n      console.log('[board]Component is onBeforeMount!');\n      console.log(el.value); //null\n    }); //컴포넌트 인스턴스가 마운트 된 후 (Dom에 추가된 후) 호출합니다.\n\n    onMounted(() => {\n      console.log('[board]Component is mounted!');\n      console.log(el.value.value); //this\n    }); //컴포넌트 인스턴스가 마운트 해재(unmounted) 된 후 호출합니다.\n\n    onUnmounted(() => {\n      console.log('[board]Component is onUnmounted!');\n      console.log(el.value); //null\n    });\n    console.log('[board]setup end');\n    return {\n      el\n    };\n  }\n\n};","map":{"version":3,"mappings":"AAQA,SAAQA,GAAR,EAAaC,SAAb,EAAwBC,WAAxB,EAAqCC,aAArC,QAAyD,KAAzD;AACA,eAAe;EACbC,KAAK,GAAE;IACL,MAAMC,EAAC,GAAIL,GAAG,CAAC,IAAD,CAAd;IACAM,OAAO,CAACC,GAAR,CAAY,oBAAZ;IACA;;;;;;;;;;;;IAeA;;IACAJ,aAAa,CAAC,MAAI;MAChBG,OAAO,CAACC,GAAR,CAAY,oCAAZ;MACAD,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,KAAf,EAFgB,CAEU;IAC3B,CAHY,CAAb,CAnBK,CAwBL;;IACAP,SAAS,CAAC,MAAI;MACZK,OAAO,CAACC,GAAR,CAAY,8BAAZ;MACAD,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,KAAH,CAASA,KAArB,EAFY,CAEoB;IACjC,CAHQ,CAAT,CAzBK,CA6BH;;IACFN,WAAW,CAAC,MAAI;MACdI,OAAO,CAACC,GAAR,CAAY,kCAAZ;MACAD,OAAO,CAACC,GAAR,CAAYF,EAAE,CAACG,KAAf,EAFc,CAEY;IAC3B,CAHU,CAAX;IAIAF,OAAO,CAACC,GAAR,CAAY,kBAAZ;IAEA,OAAO;MACLF;IADK,CAAP;EAGF;;AAxCa,CAAf","names":["ref","onMounted","onUnmounted","onBeforeMount","setup","el","console","log","value"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex15_login\\component\\boardView.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    이곳은 게시판 페이지 입니다. (board.vue)\r\n  </div>\r\n  <input value=\"this\" ref=\"el\">\r\n</template>\r\n\r\n<script>\r\nimport {ref, onMounted, onUnmounted, onBeforeMount} from 'vue'\r\nexport default {\r\n  setup(){\r\n    const el = ref(null);\r\n    console.log('[board]setup start')\r\n    /* \r\n    https://v3.vuejs.org/guide/composition-api-lifecycle-hooks.html\r\n    https://v3.ko.vuejs.org/api/options-lifecycle-hooks.html#mounted\r\n    https://kr.vuejs.org/v2/guide/components.html\r\n    * Vue.js는 라이프 사이클을 미리 등록해서 적절한 시기에 자동으로 호출합니다\r\n      이러한 시점을 낚아채서(Hook) 우리가 원하는 처리를 할 수 있게 하는 것을 훅이라고 합니다\r\n\r\n      *작성법\r\n      1. 사용할 훅을 import 합니다.\r\n        예) import {onMounted, onUnmounted} from 'vue'\r\n      2. 실행할 코드를 매개변수의 콜백함수로 작성합니다.\r\n        예) onUnmounted(()=>{})\r\n\r\n    */\r\n\r\n    //컴포넌트 인스턴스가 마운트 되기 전(Dom에 추가되기 직전) 호출합니다\r\n    onBeforeMount(()=>{\r\n      console.log('[board]Component is onBeforeMount!');\r\n      console.log(el.value);    //null\r\n    })\r\n\r\n    //컴포넌트 인스턴스가 마운트 된 후 (Dom에 추가된 후) 호출합니다.\r\n    onMounted(()=>{\r\n      console.log('[board]Component is mounted!');\r\n      console.log(el.value.value);    //this\r\n    })\r\n      //컴포넌트 인스턴스가 마운트 해재(unmounted) 된 후 호출합니다.\r\n    onUnmounted(()=>{\r\n      console.log('[board]Component is onUnmounted!');\r\n      console.log(el.value);    //null\r\n    })\r\n    console.log('[board]setup end')\r\n\r\n    return {\r\n      el\r\n    }\r\n  }\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}