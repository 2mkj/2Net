{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  class: \"container\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Nav = _resolveComponent(\"Nav\");\n\n  const _component_router_view = _resolveComponent(\"router-view\");\n\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createCommentVNode(\" \\r\\n        1. 컴포넌트란\\r\\n            조합하여 화면을 구성할 수 있는 블록을 의미합니다.\\r\\n            컴포넌트를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며,\\r\\n            코드를 쉽게 이해하고 재사용할 수 있습니다.\\r\\n\\r\\n        2. 컴포넌트 사용법\\r\\n            (1) <script>에서 컴포넌트의 위치와 이름을 import문으로 작성합니다.\\r\\n            (2) export default { 의 components 속성에 사용할 컴포넌트 이름을 작성합니다.\\r\\n            (3) <template>에서 컴포넌트를 배치합니다.\\r\\n        \\r\\n              3. :parent_id=\\\"id\\\"\\r\\n            자바스크립트에서 구한 id의 값을 parent_id를 통해 자식 컴포넌트에 전달할 수 있습니다.\\r\\n            즉, './component/navDo.vue'안에서 App_1.vue에서 구한 id값을 사용할 수 있도록 합니다.\\r\\n          \\r\\n        4. @parent_getSession=\\\"getSession\\\"\\r\\n            parent_getSession이라는 사용자정의 이벤트 이름입니다.\\r\\n            자식 컴포넌트에서 parent_getSession을 호출하면 getSession함수가 실행됩니다.\\r\\n            parent_getSession을 호출 방법은 context.emit('부모 컴포넌트의 이벤트이름')메서드를 호출하면 됩니다.\\r\\n            예) <router-view @parent_getSession=\\\"getSession\\\" :parent_id=\\\"id\\\" /> 인 경우\\r\\n                  이 router-view 컴포넌트에 연결될 컴포넌트에서 아래와 같이 작성하면 됩니다.\\r\\n                    *    자식 컴포넌트에서 작성하는 코드\\r\\n                        context.emit(\\\"parent_getSession\\\");\\r\\n\\r\\n\\r\\n\\r\\n \"), _createVNode(_component_Nav, {\n    parent_id: _ctx.id\n  }, null, 8\n  /* PROPS */\n  , [\"parent_id\"]), _createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_router_view, {\n    onParent_getSession: _ctx.getSession,\n    parent_id: _ctx.id\n  }, null, 8\n  /* PROPS */\n  , [\"onParent_getSession\", \"parent_id\"])])], 64\n  /* STABLE_FRAGMENT */\n  );\n}","map":{"version":3,"mappings":";;EA+BOA,KAAK,EAAC;;;;;;;6DA7BbC,moCA4BEC,aAAuBC,cAAvB,EAAuB;IAAjBC,SAAS,EAAEC;EAAM,CAAvB,EAAmB,IAAnB,EAAmB;EAAA;EAAnB,EAAmB,aAAnB,GACAC,oBAIM,KAJN,cAIM,CAHJJ,aAE8BK,sBAF9B,EAE8B;IADjBC,mBAAiB,EAAEH,eACF;IAAjBD,SAAS,EAAEC;EAAM,CAF9B;;EAAA,uCAGI,CAJN","names":["class","_createCommentVNode","_createVNode","_component_Nav","parent_id","_ctx","_createElementVNode","_component_router_view","onParent_getSession"],"sourceRoot":"","sources":["C:\\vue_project\\vue3-first\\src\\ex18_component_store\\App_1.vue"],"sourcesContent":["<template>\r\n\r\n<!-- \r\n        1. 컴포넌트란\r\n            조합하여 화면을 구성할 수 있는 블록을 의미합니다.\r\n            컴포넌트를 활용하면 화면을 빠르게 구조화하여 일괄적인 패턴으로 개발 할 수 있으며,\r\n            코드를 쉽게 이해하고 재사용할 수 있습니다.\r\n\r\n        2. 컴포넌트 사용법\r\n            (1) <script>에서 컴포넌트의 위치와 이름을 import문으로 작성합니다.\r\n            (2) export default { 의 components 속성에 사용할 컴포넌트 이름을 작성합니다.\r\n            (3) <template>에서 컴포넌트를 배치합니다.\r\n        \r\n              3. :parent_id=\"id\"\r\n            자바스크립트에서 구한 id의 값을 parent_id를 통해 자식 컴포넌트에 전달할 수 있습니다.\r\n            즉, './component/navDo.vue'안에서 App_1.vue에서 구한 id값을 사용할 수 있도록 합니다.\r\n          \r\n        4. @parent_getSession=\"getSession\"\r\n            parent_getSession이라는 사용자정의 이벤트 이름입니다.\r\n            자식 컴포넌트에서 parent_getSession을 호출하면 getSession함수가 실행됩니다.\r\n            parent_getSession을 호출 방법은 context.emit('부모 컴포넌트의 이벤트이름')메서드를 호출하면 됩니다.\r\n            예) <router-view @parent_getSession=\"getSession\" :parent_id=\"id\" /> 인 경우\r\n                  이 router-view 컴포넌트에 연결될 컴포넌트에서 아래와 같이 작성하면 됩니다.\r\n                    *    자식 컴포넌트에서 작성하는 코드\r\n                        context.emit(\"parent_getSession\");\r\n\r\n\r\n\r\n -->\r\n\r\n  <Nav :parent_id=\"id\" />\r\n  <div class=\"container\">\r\n    <router-view\r\n                @parent_getSession=\"getSession\"\r\n                :parent_id=\"id\" />\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n    import {ref } from 'vue';\r\n    import { useRoute } from 'vue-router';\r\n    import axios from './axios/axiossetting.js';\r\n\r\nexport default {\r\n\r\n}\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]},"metadata":{},"sourceType":"module"}